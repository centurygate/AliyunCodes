var g_chartid = 200;

$(document).ready(function(){

    //var stompClient = null;
    var sockurl = project_url+'/add';
    
    
    //显示固定的曲线窗口
    startechart('const-1', 0); //默认监视“0#--液位计1”
    //startechart('const-2');
    
    $("body").css("min-height",$(window).height()-90);
    $(".demo").css("min-height",$(window).height()-130);

    $(".demo").sortable({
        handle:".drag"
    });

    $(".sidebar-nav .lyrow").draggable({
        connectToSortable:".demo",
        helper:"clone",
        handle:".drag",
        drag: function(e,t){
            t.helper.width(400)
        },
        stop: function(e,t) {
            var chart1 = "<div id='" + g_chartid + "' style='width: 100%;height:100%;'></div>"
            var currentColumn = $(".demo .column:not(.added)");
            //column自己插入id：column+g_chartid
            currentColumn.attr('id', 'column'+g_chartid);
            currentColumn.append(chart1);
            
            //在这里要获取当前拖动tab的id编号，然后传入startechart（）的第二个参数之中；
            var sensorid = currentColumn.parent().parent().attr('name');
            
            var rslut = startechart(g_chartid, sensorid);
            if(rslut == null)
            {
                //bug,删除新添加的<div>标签
                currentColumn.remove("#g_chartid");
                g_chartid++;
                return;
            }
            g_chartid++;

            //新加入的column添加class：“added”
            currentColumn.addClass("added");
        }
    });


    $(".demo").delegate(".remove","click",function(e){
            e.preventDefault();
            $(this).parent().remove();
            if(!$(".demo .lyrow").length>0){
                clearDemo();
            }
        }
    );
    
    
    $(".demo").delegate(".transform","click",function (e) {
        e.preventDefault();

        //判断并在“实时”和“历史”两种图表之间进行切换
        var curdiv = $(this).parent().find(".column");
        var sensorid = curdiv.parent().parent().attr('name');

        if(curdiv.attr("name") == 'realtime')
        {
            var id = curdiv.attr('id');
            if(id != null)
            {
                transformHistory(id);
                curdiv.attr("name","history");
            }
        }
        else if(curdiv.attr("name") == 'history')
        {
            var id = curdiv.attr('id');
            if(id != null)
            {
                transformRealtime(id, sensorid);
                curdiv.attr("name","realtime");
            }
        }
        else{
            return;
        }
    });


    function clearDemo(){
        $(".demo").empty();
    };


    //启动echart的动态图表功能;  num--（0-14）的左侧监视传感器的编号；
    function startechart(id, num){

        var myChart;
        //初始化图表控件
        var findid = document.getElementById(id);
        if(findid == null)
        {
            return null;
        }
        else{
            myChart = echarts.init(findid);
        }

        //初始空白没有数据的option
        var option = {
            title: {
                text: '动态数据'
            },
            tooltip: {
                trigger: 'axis'
            },
            legend: {
                data:['监测值']
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                data: (function (){
                    var now = new Date();
                    var res = [];
                    var len = 20;
                    while (len--) {
                        res.unshift(now.toLocaleTimeString().replace(/^\D*/,''));
                        now = new Date(now - 2000);
                    }
                    return res;
                })()
            },
            yAxis: {
                type: 'value',
                scale: true,
                name: '示数',
                max: 1.0,
                min: 0.0,
                boundaryGap: [0.2, 0.2]
            },
            series: [
                {
                    name:'监测值',
                    type:'line',
                    data:(function (){
                        var res = [];
                        var len = 0;
                        while (len < 20) {
                            res.push( 0.0);
                            len++;
                        }
                        return res;
                    })()
                }
            ]
        };

        //初始化设定图表
        myChart.setOption(option);

        
        //使用实时数据替换随机数列
        connect(myChart ,option, num);

        return 1;
    }



    //新的转换History函数,主旨是清空原来的data值，放入新的100个随机数值，并且停止Websocket的更新
    function transformHistory(id) {

        var chart;
        //初始化图表控件
        var findid = document.getElementById(id);
        if(findid == null)
        {
            return null;
        }
        else{
            chart = echarts.init(findid);
        }
        
        
        var option ={
            title: {
                text: '动态数据'
            },
            tooltip: {
                trigger: 'axis'
            },
            legend: {
                data:['监测值']
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                data: (function (){
                    var now = new Date();
                    var res = [];
                    var len = 20;
                    while (len--) {
                        res.unshift(now.toLocaleTimeString().replace(/^\D*/,''));
                        now = new Date(now - 2000);
                    }
                    return res;
                })()
            },
            yAxis: {
                type: 'value',
                scale: true,
                name: '示数',
                max: 1.0,
                min: 0.0,
                boundaryGap: [0.2, 0.2]
            },
            dataZoom: {
                show: true,
                start: 0,
                end: 10
            },
            series: [
                {
                    name:'监测值',
                    type:'line',
                    data:(function (){
                        var res = [];
                        var len = 0;
                        while (len < 100) {
                            res.push(Math.random().toFixed(1));
                            len++;
                        }
                        return res;
                    })()
                }
            ]
        };

        //disconnect();
        
        chart.setOption(option);
    }


    //新的转换realtime函数，主旨是清空历史的100个数据，换成10个0.0值，并且开启Websocket的跟新
    function transformRealtime(id, num) {

        var chart;
        //初始化图表控件
        var findid = document.getElementById(id);
        if(findid == null)
        {
            return null;
        }
        else{
            chart = echarts.init(findid);
        }

        var option = {
            title: {
                text: '动态数据'
            },
            tooltip: {
                trigger: 'axis'
            },
            legend: {
                data:['监测值']
            },
            xAxis: {
                type: 'category',
                boundaryGap: false,
                data: (function (){
                    var now = new Date();
                    var res = [];
                    var len = 20;
                    while (len--) {
                        res.unshift(now.toLocaleTimeString().replace(/^\D*/,''));
                        now = new Date(now - 2000);
                    }
                    return res;
                })()
            },
            yAxis: {
                type: 'value',
                scale: true,
                name: '示数',
                max: 1.0,
                min: 0.0,
                boundaryGap: [0.2, 0.2]
            },
            series: [
                {
                    name:'监测值',
                    type:'line',
                    data:(function (){
                        var res = [];
                        var len = 0;
                        while (len < 20) {
                            res.push( 0.0);
                            len++;
                        }
                        return res;
                    })()
                }
            ]
        };

        chart.setOption(option);

        connect(chart, option, num);
    }
    
    
    function connect(chart, option, num) {

        var socket = new SockJS(sockurl);
        if((socket == undefined) || (socket == null))
        {
            console.log("(socket == undefined) || (socket == null)");
        }
        
        var stompClient = Stomp.over(socket);
        stompClient.connect({}, function(frame) {

            console.log('Connected: ' + frame);

            stompClient.subscribe('/topic/showResult', function(calResult){
                //console.log(calResult);
                var measures = JSON.parse(calResult.body);

                //var option = chart.getOption();
                option.series[0].data.shift();
                option.series[0].data.push(measures[num].value);

                var axisData = (new Date()).toLocaleTimeString().replace(/^\D*!/,'');
                option.xAxis.data.shift();
                option.xAxis.data.push(axisData);
                chart.setOption(option);
            });
        });
    }

    function disconnect() {
        stompClient.disconnect();
        console.log("Disconnected");
    }
});


